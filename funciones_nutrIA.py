# Importaciones necesarias para el bot
from telebot import TeleBot
from config import TELEGRAM_TOKEN, OPENAI_API_KEY # <-- Modificaci√≥n aqu√≠: Importar OPENAI_API_KEY
from telebot.types import ReplyKeyboardMarkup, ForceReply, ReplyKeyboardRemove
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import firebase_admin
from firebase_admin import credentials, db
import logging
import openai
import re
from datetime import date

# Inicializaci√≥n del bot
bot = TeleBot(TELEGRAM_TOKEN)

# Inicializaci√≥n de Firebase
print("Inicializando Firebase...")
cred = credentials.Certificate("serviceAccountKey.json")
firebase_admin.initialize_app(cred, {
    'databaseURL': 'https://nutribot-3d198-default-rtdb.firebaseio.com/'
})
print("Firebase inicializado correctamente.")

# Referencia a la base de datos
db_ref = db.reference('usuarios')

# Inicializaci√≥n de OpenAI
openai.api_key = OPENAI_API_KEY # <-- Modificaci√≥n aqu√≠: Asignar la clave de la API
print("OpenAI inicializado correctamente.")

# Habilitar logs para debugging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# Diccionarios para manejar el estado y los datos de los usuarios
estado_usuarios = {}
usuarios_datos = {}

# --- FUNCIONES DE COMANDOS GLOBALES ---

@bot.message_handler(commands=['start'])
def saludar_usuario(message):
    chat_id = message.chat.id
    
    # Comprobar si el usuario ya existe en Firebase
    usuario_existente = db_ref.child(str(chat_id)).child('perfil').get()
    if usuario_existente:
        estado_usuarios[chat_id] = "menu"
        bot.send_message(chat_id, "ü¶¶‚ö†Ô∏è Ya est√°s registrado.\n\nUsa /menu para ver las opciones.")
        return
    
    # Si es nuevo, comienza el registro
    estado_usuarios[chat_id] = "esperando_nombre"
    usuarios_datos[chat_id] = {}
    bot.send_message(chat_id, "üëã Hola, soy *NutrIA*. Un gusto saludarte.\n\n¬øC√≥mo te llamas?", parse_mode="Markdown")

@bot.message_handler(commands=['menu'])
def mostrar_menu(message):
    chat_id = message.chat.id
    # Solo muestra el men√∫ si el usuario est√° registrado
    if db_ref.child(str(chat_id)).child('perfil').get():
        estado_usuarios[chat_id] = "menu"
        markup = ReplyKeyboardMarkup(one_time_keyboard=True, 
                                     resize_keyboard=True, 
                                     input_field_placeholder="Pulsa una opci√≥n")
        markup.add("1", "2", "3", "4")
        bot.send_message(chat_id,
            "ü¶¶üìã *MEN√ö PRINCIPAL:*\n"
            "1Ô∏è‚É£ Registro/Analisis de Comida\n"
            "2Ô∏è‚É£ Recomendaciones de recetas\n"
            "3Ô∏è‚É£ Seguimiento Nutricional\n"
            "4Ô∏è‚É£ Editar Perfil\n\n"
            "‚ÑπÔ∏è ¬øTienes dudas? Usa /help para aprender c√≥mo usar NutrIA Assistant.",
            parse_mode="Markdown",
            reply_markup=markup
        )
    else:
        bot.send_message(chat_id, "‚ö†Ô∏è Primero debes completar el registro usando /start.")

@bot.message_handler(commands=['help'])
def mostrar_help(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, """ ü¶¶ <u>¬øC√≥mo usar NutrIA Assistant?</u> ü¶¶

Aqu√≠ tienes una gu√≠a de lo que puedes hacer con el bot:

1Ô∏è‚É£ <b>Registro / An√°lisis de comida</b>  
Escribe lo que comiste o piensas comer. NutrIA te dir√° cu√°ntas <u>calor√≠as, prote√≠nas, carbohidratos y grasas contiene tu alimento</u>. Podr√°s decidir si deseas guardar ese an√°lisis como parte de tu seguimiento.

2Ô∏è‚É£ <b>Recomendaciones de comidas</b>  
NutrIA te sugiere recetas saludables y econ√≥micas seg√∫n tu tipo de dieta <b>(d√©ficit cal√≥rico, recomposici√≥n muscular o super√°vit cal√≥rico)</b> y tu estabilidad econ√≥mica. Tambi√©n te dir√° cu√°ntos nutrientes aporta la receta recomendada.

3Ô∏è‚É£ <b>Seguimiento nutricional</b>  
Aqu√≠ se guarda todo lo que decidiste registrar. Puedes revisar tu consumo diario, semanal o mensual. Adem√°s, recibir√°s consejos personalizados para mejorar tu alimentaci√≥n.

4Ô∏è‚É£ <b>Editar perfil</b>  
¬øCambi√≥ tu situaci√≥n econ√≥mica? ¬øQuieres ajustar tu tipo de dieta o nivel de actividad f√≠sica? Aqu√≠ puedes actualizar tus datos para que NutrIA siga adapt√°ndose a tus necesidades.

---

Para volver al men√∫ principal escribe /menu.
""", parse_mode="html")

@bot.message_handler(commands=['reset'])
def reset_perfil(message):
    chat_id = message.chat.id
    usuario_existente = db_ref.child(str(chat_id)).child('perfil').get()
    if not usuario_existente:
        bot.send_message(chat_id, "‚ö†Ô∏è No tienes un perfil registrado para borrar. Usa /start para crear uno.")
        return
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("‚úÖ Confirmar", callback_data='confirmar_reset'),
               InlineKeyboardButton("‚ùå Cancelar", callback_data='cancelar_reset'))
    bot.send_message(chat_id, "‚ö†Ô∏è Est√°s a punto de borrar todos tus datos de perfil.\n¬øEst√°s seguro de que quieres continuar?", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data in ['confirmar_reset', 'cancelar_reset'])
def handle_reset_callback(call):
    chat_id = call.message.chat.id
    bot.edit_message_reply_markup(chat_id=chat_id, message_id=call.message.message_id, reply_markup=None)
    if call.data == 'confirmar_reset':
        try:
            db_ref.child(str(chat_id)).delete()
            if chat_id in estado_usuarios:
                del estado_usuarios[chat_id]
            if chat_id in usuarios_datos:
                del usuarios_datos[chat_id]
            bot.send_message(chat_id, "‚úÖ Tu perfil ha sido borrado exitosamente. Usa /start para crear uno nuevo.")
            logger.info(f"Perfil del usuario {chat_id} borrado de Firebase.")
        except Exception as e:
            bot.send_message(chat_id, "‚ùå Ocurri√≥ un error al intentar borrar tu perfil. Int√©ntalo de nuevo m√°s tarde.")
            logger.error(f"Error al borrar el perfil del usuario {chat_id}: {e}")
    elif call.data == 'cancelar_reset':
        bot.send_message(chat_id, "üëç El borrado ha sido cancelado. Tus datos est√°n a salvo.")


# --- FUNCI√ìN DE GUARDADO EN FIREBASE (TU C√ìDIGO) ---
def guardar_perfil_en_firebase(chat_id):
    """Guarda los datos del perfil del usuario y la estructura completa en Firebase."""
    try:
        perfil_usuario = usuarios_datos.get(chat_id, {})
        if not perfil_usuario:
            logger.warning(f"No se encontraron datos para el chat_id {chat_id}. No se guard√≥ en Firebase.")
            return

        nuevo_usuario = {
            'perfil': {
                'nombre': perfil_usuario.get('nombre'),
                'cedula': perfil_usuario.get('cedula'),
                'genero': perfil_usuario.get('genero'),
                'peso': perfil_usuario.get('peso'),
                'altura': perfil_usuario.get('altura_cm'),
                'edad': perfil_usuario.get('edad'),
                'nivelActividad': perfil_usuario.get('actividad_fisica'),
                'economia': perfil_usuario.get('economia'),
                'tipoDieta': perfil_usuario.get('dieta'),
            },
            'comidas': {},
            'historial': {},
            'registros': {
                'diario': {},
                'mensual': {},
                'semanal': {}
            }
        }
        
        db_ref.child(str(chat_id)).set(nuevo_usuario)
        logger.info(f"Datos del usuario {chat_id} con estructura completa guardados en Firebase.")
        
    except Exception as e:
        logger.error(f"Error al guardar los datos en Firebase para el chat_id {chat_id}: {e}")

# --- TU C√ìDIGO DE REGISTRO DE USUARIO (SIN CAMBIOS) ---

@bot.message_handler(func=lambda m: estado_usuarios.get(m.chat.id) == "esperando_nombre")
def registrar_nombre(message):
    markup = ForceReply()
    chat_id = message.chat.id
    nombre = message.text.strip().capitalize()
    usuarios_datos[chat_id]["nombre"] = nombre
    estado_usuarios[chat_id] = "esperando_cedula"
    bot.send_message(chat_id, f"ü¶¶ ¬°Mucho gusto, {nombre}!")
    bot.send_message(chat_id, f"üìÑ Ingresa tu n√∫mero de c√©dula:", reply_markup=markup)

@bot.message_handler(func=lambda m: estado_usuarios.get(m.chat.id) == "esperando_cedula")
def registrar_cedula(message):
    markup = ReplyKeyboardMarkup(one_time_keyboard=True, 
                                 input_field_placeholder="Pulsa un bot√≥n",
                                 resize_keyboard=True)
    chat_id = message.chat.id
    texto = message.text.strip()
    if len(texto) == 10 and texto.isdigit():
        usuarios_datos[chat_id]["cedula"] = texto
        estado_usuarios[chat_id] = "esperando_genero"
        markup.add("Hombre", "Mujer")
        bot.send_message(chat_id, "ü¶¶ Indica tu sexo:", reply_markup=markup)
    else:
        bot.send_message(chat_id, "‚ùå C√©dula inv√°lida. Debe contener exactamente 10 d√≠gitos.")

@bot.message_handler(func=lambda m: estado_usuarios.get(m.chat.id) == "esperando_genero")
def registrar_genero(message):
    chat_id = message.chat.id
    if message.text not in ["Hombre", "Mujer"]:
        bot.send_message(chat_id,"‚ùå ERROR: Sexo no v√°lido. \nPulsa un bot√≥n" )
    else:
        usuarios_datos[chat_id]["genero"] = message.text
        estado_usuarios[chat_id] = "esperando_peso"
        markup = ReplyKeyboardRemove()
        bot.send_message(chat_id, "ü¶¶ Ingresa tu peso en kilogramos (ej. 70.5):", reply_markup=markup)

@bot.message_handler(func=lambda m: estado_usuarios.get(m.chat.id) == "esperando_peso")
def registrar_peso(message):
    markup = ForceReply()
    chat_id = message.chat.id
    try:
        peso = float(message.text.replace(",", "."))
        if 30 <= peso <= 300:
            usuarios_datos[chat_id]["peso"] = peso
            estado_usuarios[chat_id] = "esperando_altura"
            bot.send_message(chat_id, "ü¶¶ Ingresa tu altura en cent√≠metros (ej. 170):", reply_markup=markup)
        else:
            bot.send_message(chat_id, "‚ö†Ô∏è Peso fuera de rango (30‚Äì300 kg).")
    except ValueError:
        bot.send_message(chat_id, "‚ùó Escribe un n√∫mero v√°lido. Ej: 70.5")

@bot.message_handler(func=lambda m: estado_usuarios.get(m.chat.id) == "esperando_altura")
def registrar_altura(message):
    markup = ForceReply()
    chat_id = message.chat.id
    try:
        altura = float(message.text.replace(",", "."))
        if 100 <= altura <= 250:
            usuarios_datos[chat_id]["altura_cm"] = altura
            estado_usuarios[chat_id] = "esperando_edad"
            bot.send_message(chat_id, "ü¶¶ Indica tu edad:", reply_markup=markup)
        else:
            bot.send_message(chat_id, "‚ö†Ô∏è Altura fuera de rango (100‚Äì250 cm).")
    except ValueError:
        bot.send_message(chat_id, "‚ùó Solo n√∫meros. Ej: 170")

@bot.message_handler(func=lambda m: estado_usuarios.get(m.chat.id) == "esperando_edad")
def registrar_edad(message):
    markup = ReplyKeyboardMarkup(one_time_keyboard=True, 
                                 input_field_placeholder="Pulsa un bot√≥n",
                                 resize_keyboard=True)
    chat_id = message.chat.id
    texto = message.text
    if texto.isdigit():
        edad = int(texto)
        if 10 <= edad <= 120:
            usuarios_datos[chat_id]["edad"] = edad
            estado_usuarios[chat_id] = "esperando_actividad"
            markup.add("Sedentario", "Ligera", "Moderada", "Intensa", "Muy intensa")
            bot.send_message(chat_id, "ü¶¶ Indica tu nivel de actividad f√≠sica:", reply_markup=markup)
        else:
            bot.send_message(chat_id, "‚ö†Ô∏è Edad fuera de rango (10‚Äì120 a√±os).")
    else:
        bot.send_message(chat_id, "‚ùó Solo n√∫meros. Ej: 25")

@bot.message_handler(func=lambda m: estado_usuarios.get(m.chat.id) == "esperando_actividad")
def registrar_actividad(message):
    chat_id = message.chat.id
    texto = message.text.strip()
    opciones_validas = ["Sedentario", "Ligera", "Moderada", "Intensa", "Muy intensa"]
    if texto not in opciones_validas:
        bot.send_message(chat_id, "‚ùå Opci√≥n no v√°lida. Pulsa un bot√≥n para seleccionar tu nivel de actividad.")
    else:
        usuarios_datos[chat_id]["actividad_fisica"] = texto
        estado_usuarios[chat_id] = "esperando_economia"
        markup = ReplyKeyboardMarkup(one_time_keyboard=True, 
                                     resize_keyboard=True, 
                                     input_field_placeholder="Pulsa un bot√≥n")
        markup.add("Alta", "Media", "Baja")
        bot.send_message(chat_id, "ü¶¶ ¬øCu√°l es tu estabilidad econ√≥mica?", reply_markup=markup)

@bot.message_handler(func=lambda m: estado_usuarios.get(m.chat.id) == "esperando_economia")
def registrar_economia(message):
    chat_id = message.chat.id
    texto = message.text.strip().capitalize()
    opciones = ["Alta", "Media", "Baja"]
    if texto in opciones:
        usuarios_datos[chat_id]["economia"] = texto
        estado_usuarios[chat_id] = "esperando_dieta"
        markup = ReplyKeyboardMarkup(one_time_keyboard=True, 
                                     resize_keyboard= False, 
                                     input_field_placeholder="Pulsa un bot√≥n")
        markup.add("D√©ficit cal√≥rico", "Recomposici√≥n muscular", "Super√°vit cal√≥rico")
        bot.send_message(chat_id, "ü¶¶ ¬øCu√°l es tu tipo de dieta realizas o desea realizar?", reply_markup=markup)
        bot.send_message(chat_id,
        """‚ÑπÔ∏è <b>D√©ficit cal√≥rico:</b> Pierdes grasa corporal consumiendo menos calor√≠as.
‚ÑπÔ∏è <b>Recomposici√≥n muscular:</b> Ganas m√∫sculo y pierdes grasa con una dieta balanceada.
‚ÑπÔ∏è <b>Super√°vit cal√≥rico:</b> Aumentas masa muscular comiendo m√°s calor√≠as.""",
        parse_mode = "html")
    else:
        markup = ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True, input_field_placeholder="Pulsa un bot√≥n")
        markup.add("Alta", "Media", "Baja")
        bot.send_message(chat_id, "‚ùó Opci√≥n no v√°lida. Pulsa un bot√≥n:", reply_markup=markup)

# DIETA (AQU√ç SE GUARDAN LOS DATOS Y SE MUESTRA EL MEN√ö)
@bot.message_handler(func=lambda m: estado_usuarios.get(m.chat.id) == "esperando_dieta")
def registrar_dieta(message):
    chat_id = message.chat.id
    texto = message.text.strip()
    opciones_validas = ["D√©ficit cal√≥rico", "Recomposici√≥n muscular", "Super√°vit cal√≥rico"]
    if texto in opciones_validas:
        usuarios_datos[chat_id]["dieta"] = texto
        estado_usuarios[chat_id] = "menu"
        guardar_perfil_en_firebase(chat_id)
        markup = ReplyKeyboardRemove()
        bot.send_message(chat_id, "‚úÖ ¬°Registro completo!\nüéâ Bienvenido a *NutrIA*", parse_mode="Markdown", reply_markup=markup)
        # Llamar al men√∫ despu√©s de completar el registro
        mostrar_menu(message)
        print(usuarios_datos)
    else:
        markup = ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True, input_field_placeholder="Selecciona una opci√≥n")
        markup.add("D√©ficit cal√≥rico", "Recomposici√≥n muscular", "Super√°vit cal√≥rico")
        bot.send_message(chat_id, "‚ùó Pulsa un bot√≥n, no escribas manualmente:", reply_markup=markup)


# --- NUEVAS FUNCIONES PARA LA L√ìGICA DE TU MEN√ö ---

def guardar_registro_diario(chat_id, proteina_nueva, grasa_nueva, carbohidratos_nuevos, calorias_nuevas):
    """
    Guarda y acumula los macronutrientes y calor√≠as del d√≠a para un usuario en Firebase.
    """
    try:
        hoy = date.today().isoformat()  # Formato YYYY-MM-DD
        registro_diario_ref = db_ref.child(str(chat_id)).child('registros').child('diario').child(hoy)
        registro_actual = registro_diario_ref.get()
        
        if registro_actual:
            proteina_total = registro_actual.get('total_proteina', 0) + proteina_nueva
            grasa_total = registro_actual.get('total_grasa', 0) + grasa_nueva
            carbohidratos_total = registro_actual.get('total_carbohidratos', 0) + carbohidratos_nuevos
            calorias_total = registro_actual.get('total_calorias', 0) + calorias_nuevas
        else:
            proteina_total = proteina_nueva
            grasa_total = grasa_nueva
            carbohidratos_total = carbohidratos_nuevos
            calorias_total = calorias_nuevas

        datos_a_guardar = {
            'total_proteina': proteina_total,
            'total_grasa': grasa_total,
            'total_carbohidratos': carbohidratos_total,
            'total_calorias': calorias_total
        }
        
        registro_diario_ref.set(datos_a_guardar)
        logger.info(f"Registro diario para {chat_id} actualizado. Fecha: {hoy}")

    except Exception as e:
        logger.error(f"Error al guardar el registro diario para {chat_id}: {e}")
        bot.send_message(chat_id, "‚ùå Ocurri√≥ un error al registrar tu comida. Int√©ntalo de nuevo m√°s tarde.")


# Manejador para la selecci√≥n del tipo de comida para la recomendaci√≥n
@bot.message_handler(func=lambda m: estado_usuarios.get(m.chat.id) == "esperando_tipo_comida_recomendacion")
def registrar_tipo_comida_recomendacion(message):
    chat_id = message.chat.id
    tipo_comida = message.text.strip().capitalize()
    opciones_validas = ["Desayuno", "Almuerzo", "Cena"]
    if tipo_comida not in opciones_validas:
        bot.send_message(chat_id, "‚ùå Opci√≥n no v√°lida. Por favor, elige 'Desayuno', 'Almuerzo' o 'Cena'.")
        return
    usuarios_datos[chat_id]["tipo_comida_recomendacion"] = tipo_comida
    bot.send_message(chat_id, "‚è≥ Generando tu recomendaci√≥n...")
    recomendacion_completa = obtener_recomendacion_chatgpt(chat_id, tipo_comida)
    
    match_plato = re.search(r'te prepares (.+?), ya que es rico', recomendacion_completa, re.IGNORECASE)
    nombre_plato_recomendado = match_plato.group(1).strip() if match_plato else "Receta Recomendada"
    usuarios_datos[chat_id]["ultimo_item_para_registrar"] = {
        "tipo": "recomendacion",
        "nombre": nombre_plato_recomendado,
        "analisis": recomendacion_completa
    }
    bot.send_message(chat_id, recomendacion_completa, parse_mode="Markdown")
    estado_usuarios[chat_id] = "confirmar_registro_item"
    bot.send_message(chat_id, "üìù ¬øDeseas registrar este alimento/receta para tu seguimiento nutricional?\nResponde *s√≠* o *no*.", parse_mode="Markdown")


# Manejador general para todas las respuestas de texto
@bot.message_handler(func=lambda message: True)
def responder_a_todo(message):
    chat_id = message.chat.id
    user_input = message.text.strip()
    
    # Manejo de las opciones del men√∫
    if estado_usuarios.get(chat_id) == "menu":
        if user_input == "1":
            estado_usuarios[chat_id] = "registro_comida"
            bot.send_message(chat_id, "üçΩÔ∏è Escribe el nombre del plato o comida que deseas analizar:")
            return
        elif user_input == "2":
            if db_ref.child(str(chat_id)).child('perfil').get():
                estado_usuarios[chat_id] = "esperando_tipo_comida_recomendacion"
                markup = ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True, input_field_placeholder="Pulsa una opci√≥n")
                markup.add("Desayuno", "Almuerzo", "Cena")
                bot.send_message(chat_id, "¬øPara qu√© comida del d√≠a deseas la recomendaci√≥n? (Desayuno, Almuerzo, Cena)", reply_markup=markup)
            else:
                bot.send_message(chat_id, "‚ö†Ô∏è Para darte recomendaciones, necesito que completes tu registro con /start.")
            return
        elif user_input == "3":
            # Aqu√≠ ir√≠a la l√≥gica para la opci√≥n de seguimiento nutricional
            bot.send_message(chat_id, "Esta opci√≥n a√∫n no est√° implementada. ¬°Pronto estar√° disponible!")
            return
        elif user_input == "4":
            # Aqu√≠ ir√≠a la l√≥gica para editar perfil
            bot.send_message(chat_id, "Esta opci√≥n a√∫n no est√° implementada. ¬°Pronto estar√° disponible!")
            return
        else:
            # Si el usuario no selecciona una opci√≥n del men√∫, responde como asistente general
            respuesta = responder_chatgpt(user_input)
            bot.send_message(chat_id, respuesta)
            return

    # Si el estado es "registro_comida", analiza la comida
    if estado_usuarios.get(chat_id) == "registro_comida":
        plato_analizar = user_input
        resultado_analisis = analizar_comida_chatgpt(plato_analizar)
        bot.send_message(chat_id, resultado_analisis)
        if chat_id not in usuarios_datos:
            usuarios_datos[chat_id] = {}
        usuarios_datos[chat_id]["ultimo_item_para_registrar"] = {
            "tipo": "comida",
            "nombre": plato_analizar,
            "analisis": resultado_analisis
        }
        estado_usuarios[chat_id] = "confirmar_registro_item"
        bot.send_message(chat_id, "üìù ¬øDeseas registrar este alimento/receta para tu seguimiento nutricional?\nResponde *s√≠* o *no*.", parse_mode="Markdown")
        return
    
    # Manejador para la confirmaci√≥n de registro
    if estado_usuarios.get(chat_id) == "confirmar_registro_item":
        respuesta = user_input.lower()
        item_data = usuarios_datos[chat_id].get("ultimo_item_para_registrar", {})
        if not item_data:
            bot.send_message(chat_id, "‚ö†Ô∏è No hay alimento/receta para registrar.")
            estado_usuarios[chat_id] = "menu"
            mostrar_menu(message)
            return

        if respuesta in ["s√≠", "si"]:
            analisis_texto = item_data.get("analisis", "")
            proteina_match = re.search(r'(\d+)\s*g de prote√≠na', analisis_texto)
            grasa_match = re.search(r'(\d+)\s*g de grasa', analisis_texto)
            carbohidratos_match = re.search(r'(\d+)\s*g de carbohidratos', analisis_texto)
            calorias_match = re.search(r'(\d+)\s*calor√≠as', analisis_texto)
            
            proteina = int(proteina_match.group(1)) if proteina_match else 0
            grasa = int(grasa_match.group(1)) if grasa_match else 0
            carbohidratos = int(carbohidratos_match.group(1)) if carbohidratos_match else 0
            calorias = int(calorias_match.group(1)) if calorias_match else 0

            guardar_registro_diario(chat_id, proteina, grasa, carbohidratos, calorias)
            bot.send_message(chat_id, "‚úÖ Alimento/Receta registrada exitosamente.")
        elif respuesta == "no":
            bot.send_message(chat_id, "üçΩÔ∏è Est√° bien. No se registr√≥ el alimento/receta.")
        else:
            bot.send_message(chat_id, "‚ùó Responde *s√≠* o *no* para registrar el alimento/receta.", parse_mode="Markdown")
            return
        
        estado_usuarios[chat_id] = "menu"
        mostrar_menu(message)
        return

    # Si no est√° en un flujo espec√≠fico y no es un comando, responde como asistente general
    if estado_usuarios.get(chat_id) == "menu":
        respuesta = responder_chatgpt(user_input)
        bot.send_message(chat_id, respuesta)
    else:
        bot.send_message(chat_id, "ü§î No entiendo. Usa /menu para ver las opciones o /help para una gu√≠a.")


# --- FUNCIONES DE CHATGPT ---
# Aseg√∫rate de que tu `config.py` tenga `OPENAI_API_KEY`
# Y de que la librer√≠a `openai` est√© instalada con `pip install openai`
# openai.api_key = OPENAI_API_KEY 

def responder_chatgpt(mensaje_usuario):
    """Funci√≥n para dar respuestas generales con ChatGPT."""
    try:
        response = openai.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "Eres un asistente experto en nutrici√≥n. Da consejos personalizados sobre alimentaci√≥n, recetas saludables, d√©ficit cal√≥rico y bienestar general. S√© claro y amable."},
                {"role": "user", "content": mensaje_usuario}
            ],
            temperature=0.7
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        return f"Hubo un error al procesar tu solicitud: {e}"

def analizar_comida_chatgpt(plato):
    """Funci√≥n para analizar una comida con ChatGPT y extraer macronutrientes."""
    prompt = f"""Eres un nutricionista. El usuario te indicar√° un plato. Tu tarea es DEVOLVER √öNICAMENTE los valores aproximados de macronutrientes y calor√≠as para ese plato. Es crucial que SIEMPRE respondas en el formato exacto especificado a continuaci√≥n, incluso si debes hacer una estimaci√≥n general. NO agregues ning√∫n texto adicional, explicaciones, disculpas, ni menciones que no tienes informaci√≥n. Aseg√∫rate de que los valores num√©ricos est√©n presentes.
Para el plato "{plato}" tiene:
‚Ä¢ Xg de prote√≠na
‚Ä¢ Yg de grasa
‚Ä¢ Zg de carbohidratos
‚Ä¢ W calor√≠as"""
    try:
        response = openai.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "Eres un nutricionista especializado en an√°lisis de comidas. Tu respuesta debe ser *siempre* concisa, seguir el formato exacto especificado y *nunca* indicar falta de informaci√≥n. Siempre proporciona una estimaci√≥n con valores num√©ricos."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.3,
            max_tokens=150
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        return f"‚ö†Ô∏è Error al analizar la comida: {e}"

def obtener_recomendacion_chatgpt(chat_id, tipo_comida):
    """Funci√≥n para obtener una recomendaci√≥n de receta con ChatGPT."""
    user_data = usuarios_datos.get(chat_id)
    if not user_data:
        return "‚ö†Ô∏è No tengo tus datos de registro para darte recomendaciones. Por favor, usa /start para registrarte."
    economia = user_data.get("economia", "No especificada").lower()
    dieta = user_data.get("dieta", "No especificada").lower()
    nombre = user_data.get("nombre", "Usuario")
    prompt = f"""Hola {nombre}. Eres un nutricionista experto en dar recomendaciones de recetas.
Considerando que mi estabilidad econ√≥mica es '{economia}' y mi tipo de dieta es '{dieta}', por favor, sugiere una receta saludable y econ√≥mica para el '{tipo_comida}'.
Tu respuesta debe seguir el siguiente formato EXACTO, incluyendo la secci√≥n de macronutrientes al final. Aseg√∫rate de que los valores num√©ricos est√©n presentes.
Para un {tipo_comida} te recomiendo que te prepares [Nombre del Plato], ya que es rico en [cualidades nutricionales, ej., prote√≠nas y fibra].
[Descripci√≥n breve de la receta, ingredientes y preparaci√≥n en 3-5 l√≠neas].
Para [Nombre del Plato] se calcula que:
‚Ä¢ Xg de prote√≠na
‚Ä¢ Yg de grasa
‚Ä¢ Zg de carbohidratos
‚Ä¢ W calor√≠as"""
    try:
        response = openai.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "Eres un nutricionista experto en la creaci√≥n de recetas saludables y econ√≥micas, adaptadas a diferentes tipos de dieta y estabilidad econ√≥mica. Tu respuesta debe ser concisa y seguir el formato exacto especificado, incluyendo valores num√©ricos para los macronutrientes."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=500
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        return f"‚ö†Ô∏è Hubo un error al obtener recomendaciones: {e}"

# Inicia el bot para que escuche mensajes
print("Bot en funcionamiento...")
bot.infinity_polling()
